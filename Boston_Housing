#import boston housing from sklearn 
import sklearn 
import seaborn as sb 
import matplotlib.pyplot as plt
import numpy as np 
import pandas as pd
import warnings 
warnings.simplefilter('ignore')

#Functions
def univar(data):
    plt.figure(figsize=(20,10)) 
    for i in range(2,13):
        plt.subplot(3,4,1) #Median_price KDE 
        sb.distplot(data.median_price, kde = True).set_title('KDE - Median Price')
        plt.subplot(3,4,i) #Iteration - Violins
        sb.violinplot(data.drop(['CHAS'],axis=1).iloc[:,i-2],palette='Blues')\
        .set_title(list(data.drop(['CHAS'],axis=1))[i-2].capitalize().replace('_',' '))
    plt.tight_layout()
    plt.show()

def heatmap(data):
    plt.close()
    plt.figure(figsize=(8,8))
    ax = plt.axes()
    sb.heatmap(data.corr(), ax = ax)
    ax.set_title('Heatmap - Correlations')
    plt.show()
    
def pairplot(data):
    plt.close()
    plt.figure(figsize=(25,25))
    sb.pairplot(data, kind='reg', palette='husl')
    plt.show()
    
def plotreg(A,B):
    plt.close()
    plt.figure(figsize=(8,8))
    plt.scatter(A,B) 
    plt.xlabel('Actual Prices')
    plt.ylabel('Predicted prices') 
    plt.title('Predicted v Actual Prices')

#EDA: shape + nature of vars + nb NA  
boston_data = datasets.load_boston() #print(boston_data.DESCR)
df = pd.DataFrame(boston_data.data,columns=boston_data.feature_names)
df['median_price'] = pd.Series(boston_data.target)
df.rename(columns = {'CRIM':'rate_crime',
                    'ZN':'residential',
                    'INDUS':'businesszone',
                    'NOX':'oxide_concentration',
                    'RM':'nb_room',
                    'AGE':'owner_age',
                    'DIS':'dist_to_work',
                    'RAD':'highway_access',
                    'TAX':'property_tax',
                    'PTRATIO':'student_teacher_ratio',
                    'B':'blacks_in_town',
                    'LSTAT':'underclass_pct'},inplace=True)

df.sort_values(by='median_price',ascending=True)
df_types_nan = pd.DataFrame(data = {'Types':df.dtypes,'NaN':df.isnull().sum()} )
desc = pd.merge(df_types_nan, df.describe().T,left_index=True, right_index=True)
print('EDA - Quick stats\n\n', desc)

#EDA: Clean NA
if df.isnull().sum().sum(axis=0) != 0: 
    print(' \n',df.isnull().sum().sum(axis=0),' NaN values detected in this dataset')
    rep = input('Show rows? (y/n) ')
    if rep == 'y':
        df[df.isnull().any(axis=1)]
    rep = input('Proceed with ffill? (y/n) ')
    if rep == 'y': 
        df.ffill(axis = 1)

#Univariate analysis: kde for dependent var (median_price) + violins for the rest + subplots pour la grille        
print('\nUNIVARIATE ANALYSIS\n')
univar(df)

#Bivariate analysis: pairplot + heatmap on corr
print('\nBIVARIATE ANALYSIS')

#Heatmap + Extraction des coefs de correl les plus élevés + Pairplot sur les variables pertinentes 
heatmap(df) 
c = df.corr().abs() #Extraction des coefs de correl les plus élevés 
sc = c.unstack().sort_values(ascending = False) 
sc = sc.drop(sc.index[0:14], axis = 0) #Drop first 13th results - since corr = 1 
print('Top 10 highest correlation coefficients\n{}\n\nPairplot & Linear Regs'.format(sc.head(10)))
dfpair = df.copy() #Prep pairplot
dfpair = dfpair.drop(['nb_room','underclass_pct','CHAS','residential','rate_crime','blacks_in_town','student_teacher_ratio'],axis=1)
#pairplot(dfpair)

#Régression multivariée sur median_price
print('\nREGRESSION ANALYSIS')
print('Top 5 highest correlation with median_price\n',c['median_price'].copy().sort_values(ascending=False).head(5))
factors_reg = list((c[c['median_price']>=0.5]).index.values)
pos_median_price = factors_reg.index('median_price') #Get the list of relevant factors
del factors_reg[pos_median_price] #Delete median_price from the list 
X = df[factors_reg].copy() #Create basis df for reg 
Y = df['median_price'].copy() 

#Regression multiple - training set + mse
X_train, X_test, Y_train, Y_test = sklearn.model_selection.train_test_split(X, Y, test_size = 0.33, random_state = 5)
lm = LinearRegression()
lm.fit(X_train, Y_train)
Y_pred = lm.predict(X_test)
plotreg(Y_test,Y_pred)
plt.show()
plt.close()
print('\nTraining based on factors: {}'.format(', '.join(factors_reg)))
print('MSE:',sklearn.metrics.mean_squared_error(Y_test, Y_pred))
