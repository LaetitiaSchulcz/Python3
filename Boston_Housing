from sklearn import datasets
import seaborn as sb 
import matplotlib.pyplot as plt
import numpy as np 
import pandas as pd
import warnings 
warnings.simplefilter('ignore')

#Functions
def univar(data):
    plt.figure(figsize=(20,10)) 
    for i in range(2,13):
        plt.subplot(3,4,1)
        sb.distplot(data.median_price, kde = True).set_title('KDE - Median Price')
        plt.subplot(3,4,i)
        sb.violinplot(data.drop(['CHAS'],axis=1).iloc[:,i-2],palette='Blues').set_title(list(data.drop(['CHAS'],axis=1)[i].capitalize().replace('_',' '))
    plt.tight_layout()
    plt.show()

def heatmap(data):
    plt.figure(figsize=(8,8))
    ax = plt.axes()
    sb.heatmap(data.corr(), ax = ax)
    ax.set_title('Heatmap - Correlations')
    
def pairplot(data):
    plt.close()
    plt.figure(figsize=(25,25))
    sb.pairplot(data, kind='reg', palette='husl')

#EDA: shape + nature of vars + nb NA  
boston_data = datasets.load_boston() #print(boston_data.DESCR)
df = pd.DataFrame(boston_data.data,columns=boston_data.feature_names)
df['median_price'] = pd.Series(boston_data.target)
df.rename(columns = {'CRIM':'rate_crime',
                    'ZN':'residential',
                    'INDUS':'businesszone',
                    'NOX':'oxide_concentration',
                    'RM':'nb_room',
                    'AGE':'owner_age',
                    'DIS':'dist_to_work',
                    'RAD':'highway_access',
                    'TAX':'property_tax',
                    'PTRATIO':'student_teacher_ratio',
                    'B':'blacks_in_town_pct',
                    'LSTAT':'underclass_pct'},inplace=True)

df.sort_values(by='median_price',ascending=True)
df2 = pd.DataFrame(data = {'Types':df.dtypes,'NaN':df.isnull().sum()} )
desc = pd.merge(df2, df.describe().T,left_index=True, right_index=True)
print('EDA - Quick stats\n\n', desc)

#EDA: Clean NA
if df.isnull().sum().sum(axis=0) != 0: 
    print(' \n',df.isnull().sum().sum(axis=0),' NaN values detected in this dataset')
    rep = input('Show rows? (y/n) ')
    if rep == 'y':
        df[df.isnull().all(axis=0)]
    rep = input('Proceed with ffill? (y/n) ')
    if rep == 'y': 
        df.ffill(axis = 1)

#Univariate analysis: kde for dependant variable (median_price) + violins for the rest + subplots pour la grille        
print('\nUNIVARIATE ANALYSIS\n')
univar(df)
plt.close()

#Bivariate analysis: pairplot + heatmap on corr
print('\nBIVARIATE ANALYSIS')
heatmap(df) #Heatmap
plt.show()
plt.close()
c = df.corr().abs() #Extraction des 10 coefs de correl les plus élevés 
sc = c.unstack().sort_values(ascending = False) #sc comme sorted corr 
sc = sc.drop(sc.index[0:14], axis = 0) #Drop first 14th results - since corr = 1 
print('Top 10 highest correlation coefficients\n{}\n\nPairplot & Linear Regs'.format(sc.head(10)))
dfpair = df.copy() #Prepartion du pairplot avec les variables du top 10
dfpair = dfpair.drop(['nb_room','underclass_pct','CHAS','residential','rate_crime','blacks_in_town_pct','student_teacher_ratio'],axis=1)
pairplot(dfpair)
